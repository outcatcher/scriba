// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	schema "github.com/outcatcher/scriba/internal/bot/schema"
	mock "github.com/stretchr/testify/mock"
	telebot "gopkg.in/telebot.v3"
)

// MockWorkflow is an autogenerated mock type for the Workflow type
type MockWorkflow struct {
	mock.Mock
}

type MockWorkflow_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWorkflow) EXPECT() *MockWorkflow_Expecter {
	return &MockWorkflow_Expecter{mock: &_m.Mock}
}

// EntryPoint provides a mock function with given fields: handler
func (_m *MockWorkflow) EntryPoint(handler schema.Handler) telebot.HandlerFunc {
	ret := _m.Called(handler)

	var r0 telebot.HandlerFunc
	if rf, ok := ret.Get(0).(func(schema.Handler) telebot.HandlerFunc); ok {
		r0 = rf(handler)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(telebot.HandlerFunc)
		}
	}

	return r0
}

// MockWorkflow_EntryPoint_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EntryPoint'
type MockWorkflow_EntryPoint_Call struct {
	*mock.Call
}

// EntryPoint is a helper method to define mock.On call
//   - handler schema.Handler
func (_e *MockWorkflow_Expecter) EntryPoint(handler interface{}) *MockWorkflow_EntryPoint_Call {
	return &MockWorkflow_EntryPoint_Call{Call: _e.mock.On("EntryPoint", handler)}
}

func (_c *MockWorkflow_EntryPoint_Call) Run(run func(handler schema.Handler)) *MockWorkflow_EntryPoint_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.Handler))
	})
	return _c
}

func (_c *MockWorkflow_EntryPoint_Call) Return(_a0 telebot.HandlerFunc) *MockWorkflow_EntryPoint_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWorkflow_EntryPoint_Call) RunAndReturn(run func(schema.Handler) telebot.HandlerFunc) *MockWorkflow_EntryPoint_Call {
	_c.Call.Return(run)
	return _c
}

// WithTelegramAPI provides a mock function with given fields: api
func (_m *MockWorkflow) WithTelegramAPI(api schema.TelegramAPI) {
	_m.Called(api)
}

// MockWorkflow_WithTelegramAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTelegramAPI'
type MockWorkflow_WithTelegramAPI_Call struct {
	*mock.Call
}

// WithTelegramAPI is a helper method to define mock.On call
//   - api schema.TelegramAPI
func (_e *MockWorkflow_Expecter) WithTelegramAPI(api interface{}) *MockWorkflow_WithTelegramAPI_Call {
	return &MockWorkflow_WithTelegramAPI_Call{Call: _e.mock.On("WithTelegramAPI", api)}
}

func (_c *MockWorkflow_WithTelegramAPI_Call) Run(run func(api schema.TelegramAPI)) *MockWorkflow_WithTelegramAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.TelegramAPI))
	})
	return _c
}

func (_c *MockWorkflow_WithTelegramAPI_Call) Return() *MockWorkflow_WithTelegramAPI_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorkflow_WithTelegramAPI_Call) RunAndReturn(run func(schema.TelegramAPI)) *MockWorkflow_WithTelegramAPI_Call {
	_c.Call.Return(run)
	return _c
}

// WithUseCases provides a mock function with given fields: useCases
func (_m *MockWorkflow) WithUseCases(useCases schema.UseCases) {
	_m.Called(useCases)
}

// MockWorkflow_WithUseCases_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithUseCases'
type MockWorkflow_WithUseCases_Call struct {
	*mock.Call
}

// WithUseCases is a helper method to define mock.On call
//   - useCases schema.UseCases
func (_e *MockWorkflow_Expecter) WithUseCases(useCases interface{}) *MockWorkflow_WithUseCases_Call {
	return &MockWorkflow_WithUseCases_Call{Call: _e.mock.On("WithUseCases", useCases)}
}

func (_c *MockWorkflow_WithUseCases_Call) Run(run func(useCases schema.UseCases)) *MockWorkflow_WithUseCases_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(schema.UseCases))
	})
	return _c
}

func (_c *MockWorkflow_WithUseCases_Call) Return() *MockWorkflow_WithUseCases_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockWorkflow_WithUseCases_Call) RunAndReturn(run func(schema.UseCases)) *MockWorkflow_WithUseCases_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWorkflow creates a new instance of MockWorkflow. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWorkflow(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWorkflow {
	mock := &MockWorkflow{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
