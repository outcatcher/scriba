// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	telebot "gopkg.in/telebot.v3"
)

// MockTelegramAPI is an autogenerated mock type for the TelegramAPI type
type MockTelegramAPI struct {
	mock.Mock
}

type MockTelegramAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTelegramAPI) EXPECT() *MockTelegramAPI_Expecter {
	return &MockTelegramAPI_Expecter{mock: &_m.Mock}
}

// ChatByID provides a mock function with given fields: id
func (_m *MockTelegramAPI) ChatByID(id int64) (*telebot.Chat, error) {
	ret := _m.Called(id)

	var r0 *telebot.Chat
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*telebot.Chat, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *telebot.Chat); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Chat)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTelegramAPI_ChatByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatByID'
type MockTelegramAPI_ChatByID_Call struct {
	*mock.Call
}

// ChatByID is a helper method to define mock.On call
//   - id int64
func (_e *MockTelegramAPI_Expecter) ChatByID(id interface{}) *MockTelegramAPI_ChatByID_Call {
	return &MockTelegramAPI_ChatByID_Call{Call: _e.mock.On("ChatByID", id)}
}

func (_c *MockTelegramAPI_ChatByID_Call) Run(run func(id int64)) *MockTelegramAPI_ChatByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockTelegramAPI_ChatByID_Call) Return(_a0 *telebot.Chat, _a1 error) *MockTelegramAPI_ChatByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTelegramAPI_ChatByID_Call) RunAndReturn(run func(int64) (*telebot.Chat, error)) *MockTelegramAPI_ChatByID_Call {
	_c.Call.Return(run)
	return _c
}

// ChatMemberOf provides a mock function with given fields: chat, user
func (_m *MockTelegramAPI) ChatMemberOf(chat telebot.Recipient, user telebot.Recipient) (*telebot.ChatMember, error) {
	ret := _m.Called(chat, user)

	var r0 *telebot.ChatMember
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Recipient) (*telebot.ChatMember, error)); ok {
		return rf(chat, user)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, telebot.Recipient) *telebot.ChatMember); ok {
		r0 = rf(chat, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.ChatMember)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, telebot.Recipient) error); ok {
		r1 = rf(chat, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTelegramAPI_ChatMemberOf_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChatMemberOf'
type MockTelegramAPI_ChatMemberOf_Call struct {
	*mock.Call
}

// ChatMemberOf is a helper method to define mock.On call
//   - chat telebot.Recipient
//   - user telebot.Recipient
func (_e *MockTelegramAPI_Expecter) ChatMemberOf(chat interface{}, user interface{}) *MockTelegramAPI_ChatMemberOf_Call {
	return &MockTelegramAPI_ChatMemberOf_Call{Call: _e.mock.On("ChatMemberOf", chat, user)}
}

func (_c *MockTelegramAPI_ChatMemberOf_Call) Run(run func(chat telebot.Recipient, user telebot.Recipient)) *MockTelegramAPI_ChatMemberOf_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(telebot.Recipient), args[1].(telebot.Recipient))
	})
	return _c
}

func (_c *MockTelegramAPI_ChatMemberOf_Call) Return(_a0 *telebot.ChatMember, _a1 error) *MockTelegramAPI_ChatMemberOf_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTelegramAPI_ChatMemberOf_Call) RunAndReturn(run func(telebot.Recipient, telebot.Recipient) (*telebot.ChatMember, error)) *MockTelegramAPI_ChatMemberOf_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: msg
func (_m *MockTelegramAPI) Delete(msg telebot.Editable) error {
	ret := _m.Called(msg)

	var r0 error
	if rf, ok := ret.Get(0).(func(telebot.Editable) error); ok {
		r0 = rf(msg)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTelegramAPI_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type MockTelegramAPI_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - msg telebot.Editable
func (_e *MockTelegramAPI_Expecter) Delete(msg interface{}) *MockTelegramAPI_Delete_Call {
	return &MockTelegramAPI_Delete_Call{Call: _e.mock.On("Delete", msg)}
}

func (_c *MockTelegramAPI_Delete_Call) Run(run func(msg telebot.Editable)) *MockTelegramAPI_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(telebot.Editable))
	})
	return _c
}

func (_c *MockTelegramAPI_Delete_Call) Return(_a0 error) *MockTelegramAPI_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTelegramAPI_Delete_Call) RunAndReturn(run func(telebot.Editable) error) *MockTelegramAPI_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// Edit provides a mock function with given fields: msg, what, opts
func (_m *MockTelegramAPI) Edit(msg telebot.Editable, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, msg, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Editable, interface{}, ...interface{}) (*telebot.Message, error)); ok {
		return rf(msg, what, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Editable, interface{}, ...interface{}) *telebot.Message); ok {
		r0 = rf(msg, what, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Editable, interface{}, ...interface{}) error); ok {
		r1 = rf(msg, what, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTelegramAPI_Edit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Edit'
type MockTelegramAPI_Edit_Call struct {
	*mock.Call
}

// Edit is a helper method to define mock.On call
//   - msg telebot.Editable
//   - what interface{}
//   - opts ...interface{}
func (_e *MockTelegramAPI_Expecter) Edit(msg interface{}, what interface{}, opts ...interface{}) *MockTelegramAPI_Edit_Call {
	return &MockTelegramAPI_Edit_Call{Call: _e.mock.On("Edit",
		append([]interface{}{msg, what}, opts...)...)}
}

func (_c *MockTelegramAPI_Edit_Call) Run(run func(msg telebot.Editable, what interface{}, opts ...interface{})) *MockTelegramAPI_Edit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(telebot.Editable), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockTelegramAPI_Edit_Call) Return(_a0 *telebot.Message, _a1 error) *MockTelegramAPI_Edit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTelegramAPI_Edit_Call) RunAndReturn(run func(telebot.Editable, interface{}, ...interface{}) (*telebot.Message, error)) *MockTelegramAPI_Edit_Call {
	_c.Call.Return(run)
	return _c
}

// Reply provides a mock function with given fields: to, what, opts
func (_m *MockTelegramAPI) Reply(to *telebot.Message, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(*telebot.Message, interface{}, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, what, opts...)
	}
	if rf, ok := ret.Get(0).(func(*telebot.Message, interface{}, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, what, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(*telebot.Message, interface{}, ...interface{}) error); ok {
		r1 = rf(to, what, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTelegramAPI_Reply_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reply'
type MockTelegramAPI_Reply_Call struct {
	*mock.Call
}

// Reply is a helper method to define mock.On call
//   - to *telebot.Message
//   - what interface{}
//   - opts ...interface{}
func (_e *MockTelegramAPI_Expecter) Reply(to interface{}, what interface{}, opts ...interface{}) *MockTelegramAPI_Reply_Call {
	return &MockTelegramAPI_Reply_Call{Call: _e.mock.On("Reply",
		append([]interface{}{to, what}, opts...)...)}
}

func (_c *MockTelegramAPI_Reply_Call) Run(run func(to *telebot.Message, what interface{}, opts ...interface{})) *MockTelegramAPI_Reply_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(*telebot.Message), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockTelegramAPI_Reply_Call) Return(_a0 *telebot.Message, _a1 error) *MockTelegramAPI_Reply_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTelegramAPI_Reply_Call) RunAndReturn(run func(*telebot.Message, interface{}, ...interface{}) (*telebot.Message, error)) *MockTelegramAPI_Reply_Call {
	_c.Call.Return(run)
	return _c
}

// Send provides a mock function with given fields: to, what, opts
func (_m *MockTelegramAPI) Send(to telebot.Recipient, what interface{}, opts ...interface{}) (*telebot.Message, error) {
	var _ca []interface{}
	_ca = append(_ca, to, what)
	_ca = append(_ca, opts...)
	ret := _m.Called(_ca...)

	var r0 *telebot.Message
	var r1 error
	if rf, ok := ret.Get(0).(func(telebot.Recipient, interface{}, ...interface{}) (*telebot.Message, error)); ok {
		return rf(to, what, opts...)
	}
	if rf, ok := ret.Get(0).(func(telebot.Recipient, interface{}, ...interface{}) *telebot.Message); ok {
		r0 = rf(to, what, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*telebot.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(telebot.Recipient, interface{}, ...interface{}) error); ok {
		r1 = rf(to, what, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTelegramAPI_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type MockTelegramAPI_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - to telebot.Recipient
//   - what interface{}
//   - opts ...interface{}
func (_e *MockTelegramAPI_Expecter) Send(to interface{}, what interface{}, opts ...interface{}) *MockTelegramAPI_Send_Call {
	return &MockTelegramAPI_Send_Call{Call: _e.mock.On("Send",
		append([]interface{}{to, what}, opts...)...)}
}

func (_c *MockTelegramAPI_Send_Call) Run(run func(to telebot.Recipient, what interface{}, opts ...interface{})) *MockTelegramAPI_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]interface{}, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(interface{})
			}
		}
		run(args[0].(telebot.Recipient), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MockTelegramAPI_Send_Call) Return(_a0 *telebot.Message, _a1 error) *MockTelegramAPI_Send_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTelegramAPI_Send_Call) RunAndReturn(run func(telebot.Recipient, interface{}, ...interface{}) (*telebot.Message, error)) *MockTelegramAPI_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTelegramAPI creates a new instance of MockTelegramAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTelegramAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTelegramAPI {
	mock := &MockTelegramAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
