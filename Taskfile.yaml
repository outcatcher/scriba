version: '3'

dotenv:
  - .env

vars:
  BINARY_PATH: "{{ .USER_WORKING_DIR }}/build/bot"
  MIGRATE_PATH: "{{ .USER_WORKING_DIR }}/build/migrate"
  MIGRATIONS_PATH: "{{ .USER_WORKING_DIR }}/internal/migrations"

tasks:
  help:
    silent: true
    cmd: task --list

  lint:
    desc: Run lint on the project
    cmd: golangci-lint run ./...

  generate:
    desc: Generate mocks
    cmds:
      - mockery

  test:
    desc: Run unit tests
    cmds:
      - go test -v -cover -covermode atomic -coverpkg=./internal/... -coverprofile=coverage.out -count=1 ./internal/...
      - grep -v -E -f .covignore coverage.out > coverage.filtered.out
      - mv coverage.filtered.out coverage.out
      - go tool cover -html=coverage.out -o coverage.html

  build:
    desc: Build app executable
    cmd: go build -trimpath -o "{{ .BINARY_PATH }}" ./cmd/bot/main.go

  build-migrate:
    desc: Build migration executable
    cmd: go build -trimpath -o "{{ .MIGRATE_PATH }}" ./cmd/migrate/main.go

  run:
    desc: Run project with docker compose locally
    requires:
      vars:
        - BOT_TOKEN
        - POSTGRES_PASSWORD
        - POSTGRES_PORT
    cmd: docker compose up -d --build --wait

  check-deploy:
    desc: Run syntax check of the deployment
    dir: ./internal/deployment
    cmd: ansible-playbook --syntax-check deploy.yaml

  _deploy:
    desc: Deploy project to the environment
    dir: ./internal/deployment
    internal: true
    requires:
      vars:
        - BOT_TOKEN
        - POSTGRES_PASSWORD
        - POSTGRES_PORT
        - VAULT_PASS
        - ENV
    deps:
      - build
      - build-migrate
    preconditions:
      - echo ${VAULT_PASS} > .vault_pass.txt
    cmd: >
      ansible-playbook {{ .ADDITIONALS }}
      --vault-pass-file .vault_pass.txt
      --extra-vars local_binary_path="{{ .BINARY_PATH }}"
      --extra-vars local_migrate_path="{{ .MIGRATE_PATH }}"
      --extra-vars local_migrations_path="{{ .MIGRATIONS_PATH }}"
      -i "hosts/{{ .ENV }}.yaml"
      deploy.yaml
      -v

  deploy-prod:
    desc: Deploy project to the PROD
    cmds:
      - task: _deploy
        vars:
          ENV: prod

  deploy-local:
    desc: Deploy project locally
    cmds:
      - task: _deploy
        vars:
          ADDITIONALS: --ask-become-pass
          ENV: local
